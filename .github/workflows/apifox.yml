name: Automated API Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 123456
          MYSQL_DATABASE: soc
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Create application configuration
      run: |
        cd approval-server/src/main/resources
        cat > application.yml << 'EOF'
        jwt:
          secret: jwt-test-secret
          expiration: 864000000

        spring:
          datasource:
            url: jdbc:mysql://localhost:3306/soc?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&serverTimezone=Hongkong&allowPublicKeyRetrieval=true
            username: root
            password: 123456
          sql:
            init:
              mode: always
              continue-on-error: false
          redis:
            host: localhost
            port: 6379
        EOF

    - name: Build entire project
      run: |
        mvn clean install -DskipTests
        echo "Project built successfully"

    - name: Start Spring Boot application
      run: |
        cd approval-server && nohup mvn spring-boot:run > app.log 2>&1 &
        sleep 30
        echo "Application started"

    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/actuator/health 2>/dev/null; do sleep 2; done' || \
        timeout 60 bash -c 'until curl -f http://localhost:8080/ 2>/dev/null; do sleep 2; done' || \
        echo "Application may not have health endpoint, continuing..."

    - name: Setup Node.js for Apifox CLI
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Apifox CLI
      run: npm install -g apifox-cli

    - name: Running Test Scenario
      run: apifox run --access-token ${{ secrets.APIFOX_ACCESS_TOKEN }} -t 6971273 -e 35314484 -n 1 -r html,cli
      continue-on-error: true
